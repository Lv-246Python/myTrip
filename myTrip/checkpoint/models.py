"""This module contains comment model class and basic functions"""

from django.db import models
from django.db.models import ProtectedError
from django.core.exceptions import ObjectDoesNotExist, FieldError



class Checkpoint(models.Model):
    """
    Checkpoint
    :argument id: int - autogenerated primary key
    :argument longitude: float - 1-st position coordinate
    :argument latitude: float - 2-nd position coordinate
    :argument title: char - checkpoint's title
    :argument description: text - description of checkpoint
    :argument position_number: int - ordinal number of checkpoint
    :argument source_url: url - url of the checkpoint's source
    :argument trip: int - ToDo foreign key to Trip model
    """
    longitude = models.FloatField()
    latitude = models.FloatField()
    title = models.CharField(max_length=20)
    description = models.TextField()
    position_number = models.IntegerField()
    source_url = models.URLField()
    trip = models.IntegerField()

    def to_dict(self):
        """
        Serialize model and choose fields
        :return: dictionary with necessary fields
        """
        return {
            "longitude": self.longitude,
            "latitude": self.latitude,
            "title": self.title,
            "description": self.description,
            "source_url": self.source_url,
            "position_number": self.position_number,
            "trip": self.trip
        }

    @staticmethod
    def create(data):
        """
        Create new checkpoint
        Return new object if it has been created or None if there was exception
        """
        try:
            new_object = Checkpoint(**data)
            new_object.save()
        except FieldError:
            return None
        return new_object

    @staticmethod
    def get_by_id(checkpoint_id):
        """
        Return checkpoint objects with specific id or None if there is no object with such id
        """
        try:
            return Checkpoint.objects.get(id=checkpoint_id)
        except ObjectDoesNotExist:
            return None

    def update(self, data):
        """ Update field in checkpoint and save change"""
        attributes = ['longitude', 'latitude', 'title', 'description',
                      'position_number', 'source_url', 'trip']
        for attribute in data.keys():
            if attribute in attributes:
                setattr(self, attribute, data[attribute])
        self.save()
        return True

    def delete_checkpoint(self):
        """
        Delete checkpoint object and returns true if deleting
        was successful and false if it wasn't
        """
        try:
            self.delete()
        except ProtectedError:
            return False
        return True


    def __repr__(self):
        return "{} {} {}".format(self.id, self.title, self.description)

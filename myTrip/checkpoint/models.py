"""This module contains comment model class and basic functions"""

from django.db import models
from datetime import datetime
from django.core.exceptions import ObjectDoesNotExist, FieldError

from trip.models import Trip


class Checkpoint(models.Model):
    """
    Checkpoint
    :argument id: int - autogenerated primary key
    :argument longitude: float - 1-st position coordinate
    :argument latitude: float - 2-nd position coordinate
    :argument title: char - checkpoint's title
    :argument description: text - description of checkpoint
    :argument position_number: int - ordinal number of checkpoint
    :argument source_url: url - url of the checkpoint's source
    :argument trip: int - foreign key to Trip model
    """

    longitude = models.FloatField()
    latitude = models.FloatField()
    title = models.CharField(max_length=20)
    description = models.TextField()
    position_number = models.IntegerField()
    source_url = models.URLField(blank=True)
    trip = models.ForeignKey(Trip, on_delete=models.CASCADE)
    created = models.DateTimeField()
    last_modified = models.DateTimeField()

    def to_dict(self):
        """
        Convert model object to dictionary.
        Return:
            dict:
                {
                    "longitude": longitude,
                    "latitude": latitude,
                    "title": title,
                    "description": description,
                    "source_url": source_url,
                    "position_number": position_number,
                    "trip": trip
                }
        """
        return {"id": self.id,
                "longitude": self.longitude,
                "latitude": self.latitude,
                "title": self.title,
                "description": self.description,
                "source_url": self.source_url,
                "position_number": self.position_number,
                "trip": self.trip.id}
    @staticmethod
    def create(longitude, latitude, title, description, source_url, position_number, trip):
        """
        Create checkpoint with given trip_id, longitude,latitude,title,description,source_url,
        position_number,trip.
        Args:
            id (int): autogenerated primary key.
            longitude (float):  1-st position coordinate.
            latitude (float): 2-nd position coordinate.
            title (char): checkpoint's title.
            description (text): description of checkpoint.
            position_number (int):  ordinal number of checkpoint.
            source_url (url):  url of the checkpoint's source.
            trip (int):  ToDo foreign key to Trip model.
        Returns:
            Object<Checkpoint>: Object of Checkpoint.
        """

        new_checkpoint = Checkpoint()
        new_checkpoint.longitude = longitude
        new_checkpoint.latitude = latitude
        new_checkpoint.title = title
        new_checkpoint.description = description
        new_checkpoint.source_url = source_url
        new_checkpoint.position_number = position_number
        new_checkpoint.trip = Trip.get_by_id(trip)
        new_checkpoint.created = datetime.now()
        new_checkpoint.last_modified = datetime.now()
        try:
            new_checkpoint.save()
            return new_checkpoint
        except FieldError:
            return None

    @staticmethod
    def get_by_id(checkpoint_id, trip_id):
        """
        Returns checkpoint by given id.
        Args:
            checkpoint_id (int): id - primary key
            trip_id (int): foreign key to Trip model
        Returns:
            Object<Checkpoint>: Object of Checkpoint.
        """

        trip = Trip.get_by_id(trip_id)
        if trip:
            try:
                checkpoint = trip.checkpoint_set.get(id=checkpoint_id)
                return checkpoint
            except ObjectDoesNotExist:
                return None
        return None

    def update(self,
               longitude=None,
               latitude=None,
               title=None,
               description=None,
               source_url=None,
               position_number=None,
               trip=None):
        """
        Updates checkpoint with given parameters.
        Args:
            id (int): autogenerated primary key.
            longitude (float):  1-st position coordinate.
            latitude (float): 2-nd position coordinate.
            title (char): checkpoint's title.
            description (text): description of checkpoint.
            position_number (int):  ordinal number of checkpoint.
            source_url (url):  url of the checkpoint's source.
            trip (int):  ToDo foreign key to Trip model.
        Returns:
            Object<Checkpoint>: Object of Checkpoint if updating was successful and None if wasn't
        """

        if longitude:
            self.longitude = longitude
        if latitude:
            self.latitude = latitude
        if title:
            self.title = title
        if description:
            self.description = description
        if position_number:
            self.position_number = position_number
        if source_url:
            self.source_url = source_url
        if trip:
            self.trip = Trip.get_by_id(trip)
        self.last_modified = datetime.now()
        try:
            self.save()
            return self
        except models.ProtectedError:
            return None

    @staticmethod
    def delete(checkpoint_id,trip_id):
        """
        Deletes checkpoint.
        Args:
            self - checkpoint object
        Returns:
            True if deleting was successful
            False if deleting wasn't complete
        """
        checkpoint = Checkpoint.get_by_id(checkpoint_id,trip_id)
        try:
            super(Checkpoint, checkpoint).delete()
            return True
        except models.ProtectedError:
            return False
